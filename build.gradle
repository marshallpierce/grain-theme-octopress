apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'eclipse'

group = 'com.sysgears.grain'
version = '0.4.0'
defaultTasks 'preview'

ext {
    mainClassName = 'com.sysgears.grain.Main'
    compatibilityVersion = JavaVersion.VERSION_1_7
}

sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

clean.doLast { ant.delete(dir: '.cache'); ant.delete(dir: 'target') }

buildscript {
    project.ext {
        grainProps = new Properties()
        grainProps.load(new FileInputStream("$project.projectDir/application.properties"))
        grainVersion = grainProps.getProperty('grain.version')

        if (!project.grainVersion) {
            throw new RuntimeException('Grain version is not set in properties file')
        }
    }
}

configurations.all {
    exclude group: 'commons-logging'
    exclude group: 'rhino'

    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/groups/public/'
    }
}

dependencies {
    compile "com.sysgears.grain:grain:$project.grainVersion"
}

sourceSets {
    main {
        groovy {
            srcDirs = ['theme/src']
        }
    }
}

project.ext {
    classpath = sourceSets.main.runtimeClasspath
}

task gendeps {
    doLast {
        def classpath = project.classpath.files
        def depFile = new File(".site-${project.grainVersion}.dep")
        depFile.withWriter { writer ->
            classpath.findAll { it.name.endsWith('.jar') }.sort {
                !it.name.endsWith("grain-${project.grainVersion}.jar")
            }.each {
                writer.append(it.toString()).append('\n')
            }
        }
    }
}

idea {
    module {
        excludeDirs = ['.cache', '.idea', '.gradle', '.nb-gradle', '.settings', 'bin', 'out', 'target', 'gradle'].collect { file(it) }
    }
}

task generate(type: JavaExec) {
    logging.captureStandardOutput LogLevel.INFO
    classpath sourceSets.main.runtimeClasspath
    main = mainClassName
    args name
}

task preview(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = mainClassName
    args name
}

task deploy(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = mainClassName
    args name
}

task createPost(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = mainClassName
    def postName = project.hasProperty('postName') ? project.getProperty('postName') : 'NEW-POST'
    args 'create-post', postName
}
